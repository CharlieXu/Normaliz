Dinge die man von einem FullCone erfahren kann:

generators
extreme_rays
support_hyperplanes
triangulation
multiplicity
ht1_elements
hilbert_basis
hvector
hilbert_polynomial

is_pointed
is_ht1_generated       
is_ht1_extreme_rays    
is_ht1_hilbert_basis

Zu jedem der vorherigen Punkte, ob es bereits berechnet wurde/durch Eingabe vorhanden ist. Das sollte den status string ersetzen. 



Einzeloperationen die ein FullCone kann:

compute_support_hyperplanes
compute_support_hyperplanes_pyramid
compute_support_hyperplanes_triangulation
compute_support_hyperplanes_triangulation_pyramid
compute_support_hyperplanes_partial_triangulation     (�hnlich wie eine Pyramiden Methode)

check_pointed
compute_extreme_rays
check_generators_ht1
check_extreme_rays_ht1

compute_multiplicity
compute_ht1_elements          |  berechnen auch jeweils
compute_hilbert_basis         |  die Multiplizit�t
compute_hilbert_basis_hvector |  hilbert_basis beinhaltet auch immer ht1 elements
compute_polynomial

Die _pyramid Funktionen wenden auf oberster Ebene nur eine Unterteilung in Pyramiden an und rufen f�r diese die "normalen" Funktionen auf. Das kann aber sp�ter noch um eine Steuerung per Parameter oder eine Automatik erweitert werden.


Im Constructor:
Rangtest, make_prime, Nullzeilen entfernen

"computation types":

support_hyperplanes:
  compute_support_hyperplanes
  check_pointed
   |-- nein -> Ende
  compute_extreme_rays
  check_extreme_rays_ht1
  check_generators_ht1


triangulation:
  compute_support_hyperplanes_triangulation
  check_pointed
   |-- nein -> Ende
  compute_extreme_rays
  check_extreme_rays_ht1
  check_generators_ht1
  is_ht1_generated 
   |-- nein -> is_ht1_extreme_rays --> ja: neu triangulieren
	                                |->nein: ENDE
  compute_multiplicity
  

triangulation_hilbert_basis:  (alter normal)
  compute_support_hyperplanes_triangulation
  check_pointed
   |-- nein -> Ende
  compute_extreme_rays
  check_extreme_rays_ht1
  check_generators_ht1
  is_ht1_generated
  compute_hilbert_basis
  | global_reduction

hilbert_basis:
  compute_support_hyperplanes_partial_triangulation
  check_pointed
   |-- nein -> Ende
  compute_extreme_rays
  check_extreme_rays_ht1
  check_generators_ht1
  compute_hilbert_basis
  | global_reduction

heigth_1_elements:
  compute_support_hyperplanes_partial_triangulation  (oder volle?)
  check_pointed
   |-- nein -> Ende
  compute_extreme_rays
  check_extreme_rays_ht1
  check_generators_ht1
  compute_ht1_elements

hilbert_basis_polynomial:
  compute_support_hyperplanes
  check_pointed
   |-- nein -> Ende
  compute_extreme_rays
  check_extreme_rays_ht1
   |-- nein -> hilbert_basis, Ende
  check_generators_ht1
  triangulation_lift
  | lift
  | | compute_support_hyperplanes_dynamic
  | | low_part_simplicial               //check and erase upper facets 
  | line_shelling 
  find_new_face
  compute_hilbert_basis_hvector
  | global_reduction
  compute_hilbert_polynomial


hilbert_polynomial:
  compute_support_hyperplanes
  check_pointed
   |-- nein -> Ende
  compute_extreme_rays
  check_extreme_rays_ht1
   |-- nein -> hilbert_basis, ENDE
  check_generators_ht1
  triangulation_lift
  | lift
  | | compute_support_hyperplanes_dynamic
  | | low_part_simplicial               //check and erase upper facets 
  | line_shelling 
  find_new_face
  compute_ht1_elements_hvector
  compute_hilbert_polynomial






Hilfsoperationen:

transform_values
add_hyperplane
reduce_and_insert   Verschiedene Ausf�hrungen

global_reduction

und viele andere







der DUALE modus:
 hilbert_basis_dual
 | for each hyperplane
 | | cut_with_halfspace
 | | cut_with_halfspace_hilbert_basis
 | extreme_rays_rank
 | homogeneuos_low_dim
 | extract homogeneous elements
